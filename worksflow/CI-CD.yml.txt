name: CI/CD Pipeline
# Build, Test, and Deploy to Production

on:
  # Trigger  'main' branch
  push:
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Build the application and run tests
  # BOTH pushes and pull requests to ensure code quality.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Code checkout
      # This downloads the latest version of your code onto the runner.
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install application dependencies
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # Step 4: Run tests
      # This is a critical step for a real pipeline.
      # Replace 'pytest' with your actual test command.
      - name: Run backend tests with pytest
        run: |
          # For the challenge, if you don't have tests, this step can be removed.
          # In a real project, you would run something like: pytest
          echo "Test step placeholder: Add your test command here."

  # Job 2: Build Docker images and push them to a registry

  build-and-push:

    needs: build-and-test
    # This condition ensures this job only runs on a push to the main branch,
    # not on pull requests.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Docker image build and push (Backend)
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fusionpact-backend:latest

      # Step 6: Docker image build and push (Frontend)
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fusionpact-frontend:latest

  # Job 3: Deploy the new images to the cloud

  deploy-to-production:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          
          # This updated script uses 'docker-compose' (with a hyphen),
          # which is the command your server most likely has installed.
          script: |
            # Navigate to your app's directory.
            cd /home/ubuntu/fusionpact-devops-challenge

            # Pull the new images using the v1 command.
            echo "Pulling latest Docker images..."
            docker-compose pull

            # Restart the services using the v1 command.
            echo "Restarting containers..."
            docker-compose up -d

            # Clean up old images.
            echo "Cleaning up old images..."
            docker image prune -f
   